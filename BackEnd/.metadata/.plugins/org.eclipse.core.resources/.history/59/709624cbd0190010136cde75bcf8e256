package com.soloProject.service;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.soloProject.config.JwtUtil;
import com.soloProject.mapper.InquiryMapper;
import com.soloProject.mapper.UserMapper;
import com.soloProject.model.User;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class UserService {

	private final UserMapper userMapper;
	private final JwtUtil jwtUtil;
	private final PasswordEncoder passwordEncoder;
	private final InquiryMapper inquiryMpper;
	
	private final Map<String, String> verificattionCodes = new HashMap<>();
	private final EmailService emailService;
	private final JdbcTemplate jdbcTemplate;
	
	@Autowired
	public UserService (EmailService emailService,
						InquiryMapper inquiryMapper,
						JwtUtil jwtUtil,
						PasswordEncoder passwordEncoder,
						UserMapper userMapper,
						JdbcTemplate jdbcTemplate) {
		this.emailService = emailService;
		this.inquiryMpper = inquiryMapper;
		this.jwtUtil = jwtUtil;
		this.passwordEncoder = passwordEncoder;
		this.userMapper = userMapper;
		this.jdbcTemplate = jdbcTemplate;
	}
	
	public void sendVerificationEmail(String email) {
		String code = generateVerificationCode();
		userMapper.saveVerificationCode(email, code);
		emailService.sendEmail(email, "이메일 인증 코드","인증번호: "+ code);
		
	}
	
	public void verifyEmail(String email, String code) {
		String storedCode = userMapper.getVerificationCode(email);
		
		if(storedCode == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "인증번호가 존재하지 않습니다.");
		}
		
		if(!storedCode.trim().equals(code.trim())) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,"인증번호가 일치하지 않습니다.");
		}
	}
	
	public String generateVerificationCode() {
		Random random = new Random();
		return String.format("%06d",random.nextInt(1000000));
	}
	
	public void registerUser(User user) {
		if(user.getIsVerified() == null || !user.getIsVerified()) {
			throw new ResponseStatusException(HttpStatus.FORBIDDEN,"이메일 인증을 완료한 사용자만 강비할 수 있습니다.");
		}
		
		user.setIsVerified(true);
		
		String encryptedPassword = passwordEncoder.encode(user.getPassword());
		user.setPassword(encryptedPassword);
		
		userMapper.registerUser(user);
		System.out.println("회원가입 완료");
	}
	
	public boolean checkEmailExists(String email) {
		return userMapper.checkEmailExists(email) >0;
	}
	
	public boolean checkPhonExists(String phoneNumber) {
		int count = userMapper.countByPhoneNumber(phoneNumber);
		return count > 0;
	}
	
	public String findUserIdByNameAndPhone(String name, String phoneNUmber) {
		String userEmail = userMapper.findEmailByNameAndPhone(name, phoneNUmber);
		if(userEmail == null) {
			throw new IllegalArgumentException("입력한 벙보와 일치하는 계정이 없습니다.");
		}
		return userEmail;
	}
	
	public boolean checkPhoneExists(String phoneNumber) {
        // ✅ DB에서 하이픈 제거 후 비교하는 방식으로 중복 검사
        int count = userMapper.countByPhoneNumber(phoneNumber);
        return count > 0; // 0보다 크면 중복
    }
}
