package com.soloProject.service;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.soloProject.config.JwtUtil;
import com.soloProject.mapper.InquiryMapper;
import com.soloProject.mapper.UserMapper;
import com.soloProject.model.User;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class UserService {

	private final UserMapper userMapper;
	private final JwtUtil jwtUtil;
	private final PasswordEncoder passwordEncoder;
	private final InquiryMapper inquiryMpper;
	
	private final Map<String, String> verificattionCodes = new HashMap<>();
	private final EmailService emailService;
	private final JdbcTemplate jdbcTemplate;
	
	@Autowired
	public UserService (EmailService emailService,
						InquiryMapper inquiryMapper,
						JwtUtil jwtUtil,
						PasswordEncoder passwordEncoder,
						UserMapper userMapper,
						JdbcTemplate jdbcTemplate) {
		this.emailService = emailService;
		this.inquiryMpper = inquiryMapper;
		this.jwtUtil = jwtUtil;
		this.passwordEncoder = passwordEncoder;
		this.userMapper = userMapper;
		this.jdbcTemplate = jdbcTemplate;
	}
	
	public void sendVerificationEmail(String email) {
		String code = generateVerificationCode();
		userMapper.saveVerificationCode(email, code);
		emailService.sendEmail(email, "이메일 인증 코드","인증번호: "+ code);
		
	}
	
	public void verifyEmail(String email, String code) {
		String storedCode = userMapper.getVerificationCode(email);
		
		if(storedCode == null) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "인증번호가 존재하지 않습니다.");
		}
		
		if(!storedCode.trim().equals(code.trim())) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST,"인증번호가 일치하지 않습니다.");
		}
	}
	
	public String generateVerificationCode() {
		Random random = new Random();
		return String.format("%06d",random.nextInt(1000000));
	}
	
	public void registerUser(User user) {
		if(user.getIsVerified() == null || !user.getIsVerified()) {
			throw new ResponseStatusException(HttpStatus.FORBIDDEN,"이메일 인증을 완료한 사용자만 강비할 수 있습니다.");
		}
		
		user.setIsVerified(true);
		
		String encryptedPassword = passwordEncoder.encode(user.getPassword());
		user.setPassword(encryptedPassword);
		
		userMapper.registerUser(user);
		System.out.println("회원가입 완료");
	}
	
	public boolean checkEmailExists(String email) {
		return userMapper.checkEmailExists(email) >0;
	}
	
	public boolean checkPhonExists(String phoneNumber) {
		int count = userMapper.countByPhoneNumber(phoneNumber);
		return count > 0;
	}
	
	public String findUserIdByNameAndPhone(String name, String phoneNUmber) {
		String userEmail = userMapper.findEmailByNameAndPhone(name, phoneNUmber);
		if(userEmail == null) {
			throw new IllegalArgumentException("입력한 벙보와 일치하는 계정이 없습니다.");
		}
		return userEmail;
	}
	
	public boolean checkPhoneExists(String phoneNumber) {
        // ✅ DB에서 하이픈 제거 후 비교하는 방식으로 중복 검사
        int count = userMapper.countByPhoneNumber(phoneNumber);
        return count > 0; // 0보다 크면 중복
    }
	
	 public Map<String, Object> login(String email, String rawPassword) {
	        System.out.println("🚀 login() 메서드 실행됨! 입력된 이메일: " + email);

	        // 🔹 1. 유저 정보 가져오기
	        User user = userMapper.getUserByEmail(email);
	        System.out.println("🔍 [DB 조회 결과] user = " + (user != null ? "존재함" : "존재하지 않음"));

	        if (user == null) {
	            System.out.println("❌ 이메일이 존재하지 않음");
	            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "잘못된 이메일 또는 비밀번호입니다.");
	        }

	        System.out.println("🔍 [DB 저장된 해시 비번] " + user.getPassword());
	        System.out.println("🔍 [입력된 원본 비번] " + rawPassword);

	        if (!passwordEncoder.matches(rawPassword, user.getPassword())) {
	            System.out.println("❌ 비밀번호 불일치");
	            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "잘못된 이메일 또는 비밀번호입니다.");
	        }

	        System.out.println("✅ 로그인 성공! 유저 ID: " + user.getId() + ", 역할: " + user.getRole());

	        // 🔹 2. 로그인 기록 저장 (관리자 제외)
	        if (user.getId() != null && !"ADMIN".equals(user.getRole())) {
	            System.out.println("🔹 saveLoginHistory() 호출 예정 - userId: " + user.getId());
	            saveLoginHistory(user.getId());
	            System.out.println("✅ 로그인 기록 저장 완료!");
	        } else {
	            System.out.println("⚠️ 관리자 또는 ID NULL → 로그인 기록 저장 제외");
	        }

	        // 🔹 3. 마지막 로그인 시간 업데이트 (모두 적용)
	        userMapper.updateLastLogin(user.getId());
	        System.out.println("✅ last_login 컬럼 업데이트 완료");

	        // 🔹 4. login_count 증가 (관리자 제외)
	        if (!"ADMIN".equals(user.getRole())) {
	            userMapper.incrementLoginCount(email);
	            System.out.println("✅ 일반 유저 login_count 증가 완료 (1시간 간격 제한)");
	        } else {
	            System.out.println("⚠️ 관리자 로그인 → login_count 증가 제외");
	        }

	        // 🔹 5. JWT 생성
	        String token = jwtUtil.generateToken(user.getId(), user.getEmail(), user.getRole());

	        System.out.println("✅ JWT 토큰 생성 완료: " + token);

	        // 🔹 6. 응답 구성
	        Map<String, Object> response = new HashMap<>();
	        response.put("user", user);
	        response.put("token", token);

	        return response;
	    }
	
	public String getHashedPasswordByEmail(String email) {
        return userMapper.getHashedPasswordByEmail(email);
    }
}