package com.soloProject.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.soloProject.service.CustomUserDetailsService;

import lombok.RequiredArgsConstructor;

@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

	private final JwtAuthFilter jwtAuthFilter;
	private final CustomUserDetailsService customerUserDetailsService;
	
	@Bean
	public SecurityFilterChain securityFilterChain (HttpSecurity http) throws Exception{
		http
			.cors().configurationSource(corsConfigurationSource())
			.and()
			.csrf().disable()
			.authorizeHttpRequests()
			.requestMatchers("/ws/**").permitAll()
			.requestMatchers("/app/**","/topic/**").permitAll()
			.requestMatchers(HttpMethod.GET, "/user/get-hasheds-password").permitAll()
			.requestMatchers("/user/login","/user/register","/user/find-id","/user/send-verification-code","/user/verify-email","/user/comfirm-email",
					"/user/check-email","/user/check-phone")
			.requestMatchers("/admin/**").hasRole("ADMIN")
			.requestMatchers("/user/inquiries","/user/notifications/**","/user/**")
			.anyRequest().authenticated()
			.and()
			.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
			.and()
			.authenticationProvider(authenticationProvider())
			.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
		
		return http.build();
	}
	
}
